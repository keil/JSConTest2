function isPrimitive(arg) {
                var type = typeof arg;
                return arg == null || (type != "object" && type != "function");
}

function makeForwardingHandler(target) { return { get: function(rcvr,name) { return target[name];},
		set: function(rcvr,name,val) { target[name] = val; return true; },
		has: function(name) { return name in target; }
		//,
//		delete : function(name) { return delete target[name]; }//,
//		...
};
};
//var proxy = Proxy.create(makeForwardingHandler(target),
//				Object.getPrototypeOf(target));

function makeMembrane(initTarget) { var enabled = true;
		function wrapFunction(f) { return function () { // variableâˆ’argument function
				if (!enabled) {throw new Error("revoked");} try { return wrap(f.apply(wrap(this), toArray(arguments).map(wrap)));
				} catch (e) { throw wrap(e); }
		}
		}function wrap(target) { // primitives provide irrevocable knowledge, no need to wrap them
				if (isPrimitive(target)) { return target; }
				var fwdHandler = makeForwardingHandler(target);
				var baseHandler = Proxy.create({ get: function(rcvr, name) { return wrapFunction(fwdHandler[name]);
				}
				});
				if (typeof target === "function") { var wrappedF = wrapFunction(target);
						return Proxy.createFunction(baseHandler, wrappedF);
				} else { return Proxy.create(baseHandler,
								wrap(Object.getPrototypeOf(target)));
				}
		} return Object.freeze({ wrapper: wrap(initTarget),
				revoker: Object.freeze({ revoke: function() { enabled = false; }
				})
		});
}

test = {x:4711, y:{a:1,b:2}, z:4712};

test1 = makeMembrane(test);




